rules_version = '2';
// function checkForPreviousPost(authID) {
//     return get(/databases/$(database)/documents/users/$(authID)).data.lastPostTimeStamp == null
//   }
// function checkPostingFrequency(authID, postTimeStamp) {
//     return postTimeStamp - get(/databases/$(database)/documents/users/$(authID)).data.lastPostTimeStamp >duration.value(100, 's')
//   }

service cloud.firestore {
  match /databases/{database}/documents {
    function noIDUpdate(request) {
      return !request.resource.data.diff(resource.data).affectedKeys().hasAny(['id'])
    }
    match /posts/{postID} {
      allow read;
      // only relevant when create post from client
      // allow create: if request.auth != null && request.auth.uid == request.resource.data.author.id && request.resource.data.timestamp == request.time && (checkForPreviousPost(request.auth.uid) || checkPostingFrequency(request.auth.uid, request.time));
      allow update: if request.auth != null && (request.auth.uid == request.resource.data.author.id || request.resource.data.diff(resource.data).affectedKeys().hasOnly(['recommendedCount', 'bookmarkedCount']));

      match /groups/{groupID} {
        allow read;
        allow write: if request.auth != null && exists(/databases/$(database)/documents/groups/$(groupID)/members/$(request.auth.uid))
      }

      match /bookmarkedBy/{userID} {
        allow read, write: if request.auth != null && request.auth.uid == userID;
      }

      match /recommendedBy/{userID} {
        allow read, write: if request.auth != null && request.auth.uid == userID;
      }
    }

    match /MSFields/{microsoftID} {
      allow read;
    }

    match /openPositions/{openPositionID} {
      allow read;
    }

    match /techniques/{techniqueID} {
        allow read;
        allow write: if (
          request.auth != null
        && exists(/databases/$(database)/documents/groups/$(request.resource.data.group.id)/members/$(request.auth.uid))
        && request.auth.uid == request.resource.data.author.id
        );
      }

    match /researchFocuses/{researchFocusID} {
      allow read;
      allow write: if (
        request.auth != null
        && exists(/databases/$(database)/documents/groups/$(request.resource.data.group.id)/members/$(request.auth.uid))
        && request.auth.uid == request.resource.data.author.id
      );
    }

    match /users/{userID} {
      allow read;
      allow update: if request.auth != null && request.auth.uid == userID && noIDUpdate(request) && (request.resource.data.name==resource.data.name || resource.data.name == null || (request.resource.data.nameChangeTimeStamp == request.time && request.time-resource.data.nameChangeTimeStamp>duration.value(100, 'd')))
      allow create: if request.auth != null;

      match /recommendations/{recommendationID} {
        allow read;
        allow write: if request.auth != null && request.auth.uid == userID;
      }

      match /posts/{postID} {
        allow read;
      }

      match /publications/{publicationID} {
        allow read;
      }

      match /bookmarks/{bookmarkID} {
        allow read, write: if request.auth != null && request.auth.uid == userID;
      }

      match /followsGroups/{groupID} {
        allow read, write: if request.auth != null && request.auth.uid == userID;
      }

      match /groups/{groupID} {
        allow read;
        allow create;
        allow write: if request.auth != null && request.auth.uid == userID;
      }

      match /followsTopics/{groupID} {
        allow read, write: if request.auth != null && request.auth.uid == userID;
      }

      match /followsUsers/{followingUserID} {
        allow read;
        allow write: if request.auth != null && request.auth.uid == userID;
      }

      match /followedByUsers/{followerUserID} {
        allow read, write: if request.auth != null && request.auth.uid == followerUserID;
      }

      match /feeds/followingFeed/{doc=**} {
        allow read: if request.auth != null && request.auth.uid == userID;
      }

      match /topics/{userID} {
        allow read;
      }
    }

    match /groups/{groupID} {
      allow read;
      allow create: if request.auth != null && request.resource.data.keys().hasAny(['groupType']);
      allow update: if request.auth != null && existsAfter(/databases/$(database)/documents/groups/$(groupID)/members/$(request.auth.uid)) && noIDUpdate(request);

      match /followedByUsers/{userID} {
        allow read;
        allow write: if request.auth != null && request.auth.uid == userID;
      }

      match /members/{userID} {
        allow read;
        allow write: if request.auth != null && existsAfter(/databases/$(database)/documents/groups/$(groupID)/members/$(request.auth.uid));
      }

      match /posts/{postID} {
        allow read;
        allow write: if request.auth != null && exists(/databases/$(database)/documents/groups/$(groupID)/members/$(request.auth.uid));
      }

      match /publications/{publicationID} {
        allow read;
        allow write: if request.auth != null && exists(/databases/$(database)/documents/groups/$(groupID)/members/$(request.auth.uid));
      }

      match /topics/{topicID} {
        allow read;
      }

      match /feeds/postsFeed/{doc=**} {
        allow read: if request.auth != null && exists(/databases/$(database)/documents/groups/$(groupID)/members/$(request.auth.uid));
      }

      match /feeds/publicationsFeed/{doc=**} {
        allow read: if request.auth != null && exists(/databases/$(database)/documents/groups/$(groupID)/members/$(request.auth.uid));
      }

      match /invitations/{invitationID} {
        allow read, write: if request.auth != null && existsAfter(/databases/$(database)/documents/groups/$(groupID)/members/$(request.auth.uid));
      }

      match /photos/{photoID} {
        allow read;
        allow write: if request.auth != null && exists(/databases/$(database)/documents/groups/$(groupID)/members/$(request.auth.uid));
      }

      match /videos/{videoID} {
        allow read;
        allow write: if request.auth != null && exists(/databases/$(database)/documents/groups/$(groupID)/members/$(request.auth.uid));
      }

      match /techniques/{techniqueID} {
        allow read;
      }

      match /researchFocuses/{researchFocusID} {
        allow read;
      }

      match /openPositions/{openPositionID} {
        allow read;
      }
    }

    match /topics/{topicID} {
      allow read;

      match /followedByUsers/{userID} {
        allow write: if request.auth.uid == userID;
      }

      match /posts/{postID} {
        allow read;
      }

      match /publications/{publicationID} {
        allow read;
      }

      match /users/{userID} {
        allow read;
      }

      match /groups/{groupID} {
        allow read;
      }
    }
function isLinkedToPubs(userID){
   return get(/databases/$(database)/documents/users/$(userID)).data.keys().hasAny(["microsoftID"])
}
    match /publications/{publicationID} {
      allow read;
      allow write: if request.auth != null && request.resource.data.keys().hasAny(['isCustomPublication']) && isLinkedToPubs(request.auth.uid);

      match /posts/{postID} {
        allow read;
      }

      match /references/{referenceID} {
        allow read;
      }

      match /groups/{groupID} {
        allow read;
        allow write: if request.auth != null && exists(/databases/$(database)/documents/groups/$(groupID)/members/$(request.auth.uid))
      }
    }

    match /MSUsers/{userID} {
      allow read;

      match /publications/{publicationID} {
        allow read;
      }
    }

    match /verifiedGroups/{groupID} {
      allow read;
    }

    match /groupsStats/{groupID} {
      allow read;
      allow write: if request.auth != null && exists(/databases/$(database)/documents/groups/$(groupID)/members/$(request.auth.uid));
    }

    match /contactForms/{contactFormType} {
      allow write;
      allow read;
      
      match /submittedForms/{submittedFormID} {
        allow write: if request.resource.data.keys().hasAny(['isHuman']);
      }
    }

    match /invitations/group/newMemberInvites/{invitationID} {
      allow read, write: if request.auth != null && existsAfter(/databases/$(database)/documents/groups/$(request.resource.data.resourceID)/members/$(request.resource.data.invitingUserID));
    }
  }
}
